# Copyright 2020-2023 Tiryoh<tiryoh@gmail.com>
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 
# This Dockerfile is based on https://github.com/AtsushiSaito/docker-ubuntu-sweb
# which is released under the Apache-2.0 license.

FROM ubuntu:jammy-20240808

ARG TARGETPLATFORM
LABEL maintainer="ferrarini09@gmail.com>"

SHELL ["/bin/bash", "-c"]

# Upgrade OS
RUN apt-get update -q && \
    DEBIAN_FRONTEND=noninteractive apt-get upgrade -y && \
    apt-get autoclean && \
    apt-get autoremove && \
    rm -rf /var/lib/apt/lists/*

# Install Ubuntu Mate desktop
RUN apt-get update -q && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y \
        ubuntu-mate-desktop && \
    apt-get autoclean && \
    apt-get autoremove && \
    rm -rf /var/lib/apt/lists/*

# Add Package
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y \
        tigervnc-standalone-server tigervnc-common \
        supervisor wget curl gosu git sudo python3-pip tini \
        build-essential vim sudo lsb-release locales \
        bash-completion tzdata terminator \
        dos2unix && \
    apt-get autoclean && \
    apt-get autoremove && \
    rm -rf /var/lib/apt/lists/*

# noVNC and Websockify
RUN git clone https://github.com/AtsushiSaito/noVNC.git -b add_clipboard_support /usr/lib/novnc
RUN pip install git+https://github.com/novnc/websockify.git@v0.10.0
RUN ln -s /usr/lib/novnc/vnc.html /usr/lib/novnc/index.html

# Set remote resize function enabled by default
RUN sed -i "s/UI.initSetting('resize', 'off');/UI.initSetting('resize', 'remote');/g" /usr/lib/novnc/app/ui.js

# Disable auto update and crash report
RUN sed -i 's/Prompt=.*/Prompt=never/' /etc/update-manager/release-upgrades
RUN sed -i 's/enabled=1/enabled=0/g' /etc/default/apport

# Install Firefox
RUN DEBIAN_FRONTEND=noninteractive add-apt-repository ppa:mozillateam/ppa -y && \
    echo 'Package: *' > /etc/apt/preferences.d/mozilla-firefox && \
    echo 'Pin: release o=LP-PPA-mozillateam' >> /etc/apt/preferences.d/mozilla-firefox && \
    echo 'Pin-Priority: 1001' >> /etc/apt/preferences.d/mozilla-firefox && \
    apt-get update -q && \
    apt-get install -y \
    firefox && \
    apt-get autoclean && \
    apt-get autoremove && \
    rm -rf /var/lib/apt/lists/*

# Install VSCodium
RUN wget https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/raw/master/pub.gpg \
    -O /usr/share/keyrings/vscodium-archive-keyring.asc && \
    echo 'deb [ signed-by=/usr/share/keyrings/vscodium-archive-keyring.asc ] https://paulcarroty.gitlab.io/vscodium-deb-rpm-repo/debs vscodium main' \
    | tee /etc/apt/sources.list.d/vscodium.list && \
    apt-get update -q && \
    apt-get install -y codium && \
    apt-get autoclean && \
    apt-get autoremove && \
    rm -rf /var/lib/apt/lists/*

# Install ROS
ENV ROS_DISTRO humble
# desktop or ros-base
ARG INSTALL_PACKAGE=desktop

RUN apt-get update -q && \
    apt-get install -y curl gnupg2 lsb-release && \
    curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null && \
    apt-get update -q && \
    apt-get install -y ros-${ROS_DISTRO}-${INSTALL_PACKAGE} \
    python3-argcomplete \
    python3-colcon-common-extensions \
    python3-rosdep python3-vcstool && \
    rosdep init && \
    rm -rf /var/lib/apt/lists/*

RUN rosdep update

RUN echo -e "\033[1;32m=== Create user ubuntu \033[0m"
RUN useradd -m -s /bin/bash ubuntu && \
    echo "ubuntu:ubuntu" | chpasswd && \
    usermod -aG sudo ubuntu && \
    echo "ubuntu ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers
# Install simulation package only on amd64
# Not ready for arm64 for now (July 28th, 2020)
# https://github.com/Tiryoh/docker-ros2-desktop-vnc/pull/56#issuecomment-1196359860

# RUN if [ "$TARGETPLATFORM" = "linux/amd64" ]; then \
#     git clone https://github.com/osrf/gazebo_models.git /root/.gazebo/models; \
#     fi
# RUN rm -rf /root/.gazebo/models/.git



RUN if [ "$TARGETPLATFORM" = "linux/amd64" ]; then \
    apt-get update -q && \
    apt-get install -y \
    ros-${ROS_DISTRO}-gazebo-ros-pkgs \
    ros-${ROS_DISTRO}-ros-ign && \
    rm -rf /var/lib/apt/lists/*; \
    fi

    

RUN echo -e "\033[1;32mInstall Repository MARRtino Robot 2\033[0m"
    #
# USER root
RUN apt-get update && \
    apt-get install -y python3-vcstool build-essential
RUN mkdir -p /home/ubuntu/marrtinorobot2_ws/src 


WORKDIR /home/ubuntu/marrtinorobot2_ws

    RUN git clone --depth 1 -b ${ROS_DISTRO} https://github.com/micro-ROS/micro_ros_setup.git src/micro_ros_setup && \
        . /opt/ros/$ROS_DISTRO/setup.sh && \
        apt update && \
        apt install -y ed python3-pip && \
        apt install -y ros-$ROS_DISTRO-rmw-fastrtps-cpp && \
        apt remove -y ros-$ROS_DISTRO-rmw-cyclonedds-cpp && \
        apt autoremove -y && \
        rosdep update --rosdistro $ROS_DISTRO && \
        rosdep install --from-paths src --ignore-src -y && \
        colcon build && \
        echo $(/home/ubuntu/marrtinorobot2_ws /home/ubuntu/marrtinorobot2_ws/src/micro_ros_setup/package.xml | grep '<version>' | sed -r 's/.*<version>([0-9]+.[0-9]+.[0-9]+)<\/version>/\1/g') > /version.txt && \
        rm -rf log/ build/ src/* && \
        rm -rf /var/lib/apt/lists/*
    
    RUN . /opt/ros/$ROS_DISTRO/setup.sh && \
        . install/local_setup.sh && \
        apt update && \
        ros2 run micro_ros_setup create_agent_ws.sh && \
        ros2 run micro_ros_setup build_agent.sh && \
        rm -rf log/ build/ src/
# RUN mkdir -p /home/ubuntu/marrtinorobot2_ws/src && \
#      git clone -b ${ROS_DISTRO} https://github.com/micro-ROS/micro_ros_setup.git /home/ubuntu/marrtinorobot2_ws/src/micro_ros_setup 
# #     cd /home/ubuntu/marrtinorobot2_ws && \
# #     apt-get update && \
# #     rosdep update  && \
# #     rosdep install --from-path src --ignore-src -y && \
# #     colcon build && \     
# #     rm -rf /var/lib/apt/lists/*

# RUN cd /home/ubuntu/marrtinorobot2_ws && \
#     apt-get update && \
#     apt-get install -y ros-${ROS_DISTRO}-ament-cmake && \
#     rosdep update && \
#     rosdep install --from-paths /home/ubuntu/marrtinorobot2_ws/src --ignore-src -r -y && \
#     colcon build && \
#     rm -rf /var/lib/apt/lists/*

# RUN echo "source /opt/ros/${ROS_DISTRO}/setup.bash" >> ~/.bashrc && \
#     echo "source /home/ubuntu/marrtinorobot2_ws/install/setup.bash" >> ~/.bashrc && \
#     source ~/.bashrc && \
#     colcon build --packages-select micro_ros_setup

# RUN source /opt/ros/$ROS_DISTRO/setup.bash \
#     && colcon build --packages-select micro_ros_setup

# RUN source /opt/ros/$ROS_DISTRO/setup.bash && \
#     colcon build --base-paths /home/ubuntu/marrtinorobot2_ws && \
#     source /home/ubuntu/marrtinorobot2_ws/install/setup.bash
    
# RUN source /opt/ros/$ROS_DISTRO/setup.bash  \
#     && source /home/ubuntu/marrtinorobot2_ws/install/setup.bash \
#     && ros2 run micro_ros_setup create_agent_ws.sh
    
   
    
#     RUN source /opt/ros/$ROS_DISTRO/setup.bash \
#         && colcon build
RUN apt-get update -q && \
    apt-get install -y \
    mpg321 sox  libttspico-utils 

RUN pip3 install gtts opencv-python opencv-python-headless
 

# Installazione di pacchetti e repository MARRtino
RUN mkdir -p /home/ubuntu/marrtinorobot2_ws/src && \
    mkdir -p /home/ubuntu/src && \
    cd /home/ubuntu/src && \
    git clone -b humble-devel https://github.com/ROBOTIS-GIT/dynamixel-workbench.git && \
    git clone -b humble-devel https://github.com/ROBOTIS-GIT/dynamixel-workbench-msgs.git && \
    git clone -b humble-devel https://github.com/ROBOTIS-GIT/DynamixelSDK.git && \
    git clone https://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@github.com/artigianitecnologici/marrtinorobot2.git && \
    git clone https://github.com/robo-friends/m-explore-ros2.git
        # git clone https://github.com/orbbec/OrbbecSDK_ROS2.git && \
        #git clone -b ${ROS_DISTRO} https://github.com/micro-ROS/micro_ros_setup.git /home/ubuntu/marrtinorobot2_ws/src/micro_ros_setup && \


WORKDIR /home/ubuntu/marrtinorobot2_ws/src

RUN ln -s /home/ubuntu/src/DynamixelSDK . && \
    ln -s /home/ubuntu/src/dynamixel-workbench-msgs . && \
    ln -s /home/ubuntu/src/marrtinorobot2/marrtinorobot2_base . && \
    ln -s /home/ubuntu/src/marrtinorobot2/marrtinorobot2_bringup . && \
    ln -s /home/ubuntu/src/marrtinorobot2/marrtinorobot2_description . && \
    ln -s /home/ubuntu/src/marrtinorobot2/marrtinorobot2_webinterface . && \
    ln -s /home/ubuntu/src/marrtinorobot2/marrtinorobot2_gazebo . && \
    ln -s /home/ubuntu/src/marrtinorobot2/marrtinorobot2_navigation . && \
    ln -s /home/ubuntu/src/marrtinorobot2/marrtinorobot2_vision . && \
    ln -s /home/ubuntu/src/marrtinorobot2/marrtinorobot2_voice . && \
    ln -s /home/ubuntu/src/marrtinorobot2/marrtinorobot2_ps4_joy_controller . && \
    ln -s /home/ubuntu/src/marrtinorobot2/marrtinorobot2_cartographer . && \
    ln -s /home/ubuntu/src/m-explore-ros2/explore .

# Configurazione finale per l'utente 'ubuntu'
WORKDIR /home/ubuntu/marrtinorobot2_ws
RUN rosdep update && \
    rosdep install --from-paths src --ignore-src -r -y
    
RUN source /opt/ros/$ROS_DISTRO/setup.bash && \
    colcon build  && \
    source /home/ubuntu/marrtinorobot2_ws/install/setup.bash

RUN echo "source /opt/ros/$ROS_DISTRO/setup.bash" >> /home/ubuntu/.bashrc && \
    echo "source /home/ubuntu/marrtinorobot2_ws/install/setup.bash" >> /home/ubuntu/.bashrc && \
    echo "export MARRTINOROBOT2_BASE=2wd" >> /home/ubuntu/.bashrc && \
    echo "export MARRTINOROBOT2_LASER_SENSOR=rplidar" >> /home/ubuntu/.bashrc && \
    echo "export MARRTINOROBOT2_DEPTH_SENSOR=oakdlite" >> /home/ubuntu/.bashrc && \
    echo "export MARRTINOROBOT2_WEBI=$HOME/src/marrtinorobot2/marrtinorobot2_webinterface/www" >> $HOME/.bashrc && \
    echo "export MARRTINOROBOT2_WS=$HOME/marrtinorobot2_ws" >> $HOME/.bashrc && \
    echo "alias cdmd='cd ~/src/marrtinorobot2/docker'" >> $HOME/.bashrc && \
    echo "alias cdm='cd ~/src/marrtinorobot2'" >> $HOME/.bashrc && \
    echo "alias cb='cd ~/marrtinorobot2 && colcon build'" >> $HOME/.bashrc

# Copia      
# Enable apt-get completion after running `apt-get update` in the container
RUN rm /etc/apt/apt.conf.d/docker-clean

COPY ./entrypoint.sh /
RUN dos2unix /entrypoint.sh
ENTRYPOINT [ "/bin/bash", "-c", "/entrypoint.sh" ]

ENV USER ubuntu
ENV PASSWD ubuntu

