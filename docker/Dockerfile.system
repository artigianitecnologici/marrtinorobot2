# Basato su Ubuntu 22.04 (Jammy) e ROS Humble
FROM ubuntu:jammy-20240416

ARG TARGETPLATFORM
ENV ROS_DISTRO humble
ARG GITHUB_TOKEN
LABEL maintainer="ferrarini09@gmail.com"

SHELL ["/bin/bash", "-c"]

RUN echo -e "\033[1;32m=== install docker ROS2  $ROS_DISTRO ===\033[0m"
# Aggiornamento e installazione di pacchetti necessari
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get upgrade -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y \
        wget curl gosu git sudo python3-pip nano \
        build-essential vim lsb-release locales bash-completion tzdata \
        terminator dos2unix net-tools htop tmux \
        libgflags-dev nlohmann-json3-dev libgoogle-glog-dev \
        mpg321 sox libttspico-utils \
        v4l-utils && \
    apt-get autoclean && apt-get autoremove && \
    rm -rf /var/lib/apt/lists/*


#RUN ECHO "Disabilita aggiornamenti automatici e crash report"
# RUN apt-get update && \
#     apt-get install -y update-manager-core && \
#     sed -i 's/Prompt=.*/Prompt=never/' /etc/update-manager/release-upgrades && \
#     sed -i 's/enabled=1/enabled=0/g' /etc/default/apport && \
#     apt-get autoclean && apt-get autoremove && \
#     rm -rf /var/lib/apt/lists/*

#  "Installazione ROS Humble"


RUN echo -e "\033[1;32m=== Install ROS2  $ROS_DISTRO ===\033[0m"


RUN apt-get update && \
    apt-get install -y curl gnupg2 && \
    curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key | gpg --dearmor -o /usr/share/keyrings/ros-archive-keyring.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null && \
    apt-get update && \
    apt-get install -y ros-${ROS_DISTRO}-ros-base \
        python3-argcomplete python3-colcon-common-extensions \
        python3-rosdep python3-colcon-core python3-vcstool \
        libpython3-dev python3-pip && \
    rosdep init && rosdep update && \
    rm -rf /var/lib/apt/lists/*

RUN echo -e "\033[1;32m=== Install lIBRARY $ROS_DISTRO ===\033[0m"

RUN apt-get update && \
    apt-get install -y \
    ros-${ROS_DISTRO}-rplidar-ros \
    ros-${ROS_DISTRO}-v4l2-camera \
    ros-${ROS_DISTRO}-depthai-ros \
    ros-${ROS_DISTRO}-rtabmap-ros \
    ros-${ROS_DISTRO}-cartographer \
    ros-${ROS_DISTRO}-cartographer-ros \
    ros-${ROS_DISTRO}-navigation2 \
    ros-${ROS_DISTRO}-nav2-bringup \
    ros-${ROS_DISTRO}-camera-calibration-parsers \
    ros-${ROS_DISTRO}-camera-info-manager \
    ros-${ROS_DISTRO}-launch-testing-ament-cmake \
    ros-${ROS_DISTRO}-robot-localization \
    ros-${ROS_DISTRO}-rosbridge-server \
    ros-${ROS_DISTRO}-joy \
    ros-humble-teleop-twist-joy
   # ros-${ROS_DISTRO}-joy-teleop-twist-joystick


RUN echo "# Installazione di pip e pacchetti Python"
RUN apt-get update && \
apt-get install -y python3-pip && \
pip3 install gtts opencv-python opencv-python-headless


RUN echo -e "\033[1;32m=== Create user ubuntu \033[0m"
RUN useradd -m -s /bin/bash ubuntu && \
    echo "ubuntu:ubuntu" | chpasswd && \
    usermod -aG sudo ubuntu && \
    echo "ubuntu ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers



WORKDIR /home/ubuntu
#
# RUN echo -e "\033[1;32mInstall Micro ROS \033[0m"
# #
# # Installazione di pacchetti e repository MARRtino
# USER root
# RUN apt-get update && \
#     apt-get install -y python3-vcstool build-essential

# RUN mkdir -p /home/ubuntu/marrtinorobot2_ws/src && \
#     git clone -b ${ROS_DISTRO} https://github.com/micro-ROS/micro_ros_setup.git /home/ubuntu/marrtinorobot2_ws/src/micro_ros_setup && \
#     cd /home/ubuntu/marrtinorobot2_ws && \
#     apt-get update && \
#     rosdep update --rosdistro=${ROS_DISTRO} && \
#     rosdep install --rosdistro=${ROS_DISTRO} --from-paths src -iry --os=ubuntu:$(lsb_release -sc) --skip-keys micro_ros_agent && \
#     colcon build && \     
#     rm -rf /var/lib/apt/lists/*
    
#     RUN source /opt/ros/$ROS_DISTRO/setup.bash \
#         && colcon build --packages-select micro_ros_setup
    
#     RUN source /opt/ros/$ROS_DISTRO/setup.bash && \
#         colcon build --base-paths /home/ubuntu/marrtinorobot2_ws && \
#         source /home/ubuntu/marrtinorobot2_ws/install/setup.bash
     
#     RUN source /opt/ros/$ROS_DISTRO/setup.bash  \
#         && source /home/ubuntu/marrtinorobot2_ws/install/setup.bash \
#         && ros2 run micro_ros_setup create_agent_ws.sh
    
   
    
#     RUN source /opt/ros/$ROS_DISTRO/setup.bash \
#         && colcon build
USER ubuntu

RUN echo -e "\033[1;32mInstall Repository MARRtino Robot 2\033[0m"
#

# Installazione di pacchetti e repository MARRtino
RUN mkdir -p /home/ubuntu/marrtinorobot2_ws/src && \
    mkdir -p /home/ubuntu/src && \
    cd /home/ubuntu/src && \
    git clone -b humble-devel https://github.com/ROBOTIS-GIT/dynamixel-workbench.git && \
    git clone -b humble-devel https://github.com/ROBOTIS-GIT/dynamixel-workbench-msgs.git && \
    git clone -b humble-devel https://github.com/ROBOTIS-GIT/DynamixelSDK.git && \
    git clone https://${GITHUB_TOKEN}@github.com/artigianitecnologici/marrtinorobot2.git

    # git clone https://github.com/orbbec/OrbbecSDK_ROS2.git && \
    #git clone -b ${ROS_DISTRO} https://github.com/micro-ROS/micro_ros_setup.git /home/ubuntu/marrtinorobot2_ws/src/micro_ros_setup && \
WORKDIR /home/ubuntu/marrtinorobot2_ws/src

RUN ln -s /home/ubuntu/src/DynamixelSDK . && \
    ln -s /home/ubuntu/src/dynamixel-workbench-msgs . && \
    ln -s /home/ubuntu/src/marrtinorobot2/marrtinorobot2_base . && \
    ln -s /home/ubuntu/src/marrtinorobot2/marrtinorobot2_bringup . && \
    ln -s /home/ubuntu/src/marrtinorobot2/marrtinorobot2_description . && \
    ln -s /home/ubuntu/src/marrtinorobot2/marrtinorobot2_webinterface . && \
    ln -s /home/ubuntu/src/marrtinorobot2/marrtinorobot2_gazebo . && \
    ln -s /home/ubuntu/src/marrtinorobot2/marrtinorobot2_navigation . && \
    ln -s /home/ubuntu/src/marrtinorobot2/marrtinorobot2_vision . && \
    ln -s /home/ubuntu/src/marrtinorobot2/marrtinorobot2_voice . && \
    ln -s /home/ubuntu/src/marrtinorobot2/marrtinorobot2_ps4_joy_controller . && \
    ln -s /home/ubuntu/src/marrtinorobot2/marrtinorobot2_cartographer . && \
    ln -s /home/ubuntu/src/m-explore-ros2/explore .

USER root
WORKDIR /home/ubuntu/marrtinorobot2_ws/
RUN cp /home/ubuntu/src/marrtinorobot2/install/script/*.sh .

RUN source /opt/ros/$ROS_DISTRO/setup.bash && colcon build

# Configurazione finale per l'utente 'ubuntu'

USER root


RUN echo "source /opt/ros/$ROS_DISTRO/setup.bash" >> /home/ubuntu/.bashrc && \
    echo "source /home/ubuntu/marrtinorobot2_ws/install/setup.bash" >> /home/ubuntu/.bashrc && \
    echo "export MARRTINOROBOT2_BASE=2wd" >> /home/ubuntu/.bashrc && \
    echo "export MARRTINOROBOT2_LASER_SENSOR=rplidar" >> /home/ubuntu/.bashrc && \
    echo "export MARRTINOROBOT2_DEPTH_SENSOR=oakdlite" >> /home/ubuntu/.bashrc && \
    echo "export MARRTINOROBOT2_WEBI=$HOME/src/marrtinorobot2/marrtinorobot2_webinterface/www" >> $HOME/.bashrc && \
    echo "export MARRTINOROBOT2_WS=$HOME/marrtinorobot2_ws" >> $HOME/.bashrc && \
    echo "alias cdmd='cd ~/src/marrtinorobot2/docker'" >> $HOME/.bashrc && \
    echo "alias cdm='cd ~/src/marrtinorobot2'" >> $HOME/.bashrc && \
    echo "alias cb='cd ~/marrtinorobot2 && colcon build'" >> $HOME/.bashrc

# Copia e permessi entrypoint.sh
USER ubuntu
WORKDIR /home/ubuntu
# COPY ./entrypoint.sh /
# RUN chmod +x /entrypoint.sh && dos2unix /entrypoint.sh

# Impostazione entrypoint e variabili d'ambiente
CMD ["tmux", "-u"]

#CMD [ "/bin/bash", "-ci", "/home/robot/src/marrtino_apps/bringup/1-bringup.bash" ]
