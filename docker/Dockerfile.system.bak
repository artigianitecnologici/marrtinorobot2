# Basato su Ubuntu 22.04 (Jammy) e ROS Humble
FROM ubuntu:jammy-20240416

# Argomenti e variabili
ARG TARGETPLATFORM
ARG GITHUB_TOKEN
ENV ROS_DISTRO humble

# Configurazione del shell
SHELL ["/bin/bash", "-c"]

# Aggiornamento e installazione di pacchetti necessari
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get upgrade -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y \
        ubuntu-mate-desktop \
        tigervnc-standalone-server tigervnc-common \
        supervisor wget curl gosu git sudo python3-pip tini \
        build-essential vim lsb-release locales bash-completion tzdata \
        terminator dos2unix net-tools htop xrdp tmux && \
    apt-get autoclean && \
    apt-get autoremove && \
    rm -rf /var/lib/apt/lists/*

# Installazione noVNC e Websockify
RUN git clone https://github.com/AtsushiSaito/noVNC.git -b add_clipboard_support /usr/lib/novnc && \
    pip install git+https://github.com/novnc/websockify.git@v0.10.0 && \
    ln -s /usr/lib/novnc/vnc.html /usr/lib/novnc/index.html && \
    sed -i "s/UI.initSetting('resize', 'off');/UI.initSetting('resize', 'remote');/g" /usr/lib/novnc/app/ui.js

# Disabilitazione aggiornamenti automatici e crash report
RUN sed -i 's/Prompt=.*/Prompt=never/' /etc/update-manager/release-upgrades && \
    sed -i 's/enabled=1/enabled=0/g' /etc/default/apport

# Installazione ROS Humble
RUN apt-get update && \
    apt-get install -y curl gnupg2 && \
    curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null && \
    apt-get update && \
    apt-get install -y ros-${ROS_DISTRO}-desktop python3-argcomplete python3-colcon-common-extensions python3-rosdep python3-vcstool && \
    rosdep init && rosdep update && \
    rm -rf /var/lib/apt/lists/*

# Creazione utente 'ubuntu' e abilitazione sudo
RUN useradd -m -s /bin/bash ubuntu && \
    echo "ubuntu:ubuntu" | chpasswd && \
    usermod -aG sudo ubuntu

# Configura l'ambiente e prepara le directory
USER ubuntu
WORKDIR /home/ubuntu
RUN mkdir -p /home/ubuntu/src && mkdir -p /home/ubuntu/marrtinorobot2_ws/src && \
    sudo chown -R ubuntu:ubuntu /home/ubuntu/src /home/ubuntu/marrtinorobot2_ws/src

# Clonazione dei repository richiesti
RUN cd /home/ubuntu/src && \
    git clone https://github.com/orbbec/OrbbecSDK_ROS2.git && \
    git clone -b $ROS_DISTRO https://github.com/micro-ROS/micro_ros_setup.git /home/ubuntu/marrtinorobot2_ws/src/micro_ros_setup && \
    git clone -b humble-devel https://github.com/ROBOTIS-GIT/dynamixel-workbench.git && \
    git clone -b humble-devel https://github.com/ROBOTIS-GIT/dynamixel-workbench-msgs.git && \
    git clone -b humble-devel https://github.com/ROBOTIS-GIT/DynamixelSDK.git && \
    git clone https://${GITHUB_TOKEN}@github.com/artigianitecnologici/marrtinorobot2.git

# Link simbolici ai pacchetti di MARRtino robot
WORKDIR /home/ubuntu/marrtinorobot2_ws/src
RUN ln -s /home/ubuntu/src/marrtinorobot2/marrtinorobot2_base . && \
    ln -s /home/ubuntu/src/marrtinorobot2/marrtinorobot2_bringup . && \
    ln -s /home/ubuntu/src/marrtinorobot2/marrtinorobot2_description . && \
    ln -s /home/ubuntu/src/marrtinorobot2/marrtinorobot2_gazebo . && \
    ln -s /home/ubuntu/src/marrtinorobot2/marrtinorobot2_navigation . && \
    ln -s /home/ubuntu/src/marrtinorobot2/marrtinorobot2_vision . && \
    ln -s /home/ubuntu/src/marrtinorobot2/marrtinorobot2_voice . && \
    ln -s /home/ubuntu/src/marrtinorobot2/marrtinorobot2_social . && \
    ln -s /home/ubuntu/src/marrtinorobot2/marrtinorobot2_cartographer .

# Build finale dei pacchetti ROS
USER root
WORKDIR /home/ubuntu/marrtinorobot2_ws
RUN source /opt/ros/$ROS_DISTRO/setup.bash && colcon build

# Configurazione finale per l'utente ubuntu
USER ubuntu
RUN echo "source /opt/ros/$ROS_DISTRO/setup.bash" >> $HOME/.bashrc && \
    echo "source /home/ubuntu/marrtinorobot2_ws/install/setup.bash" >> $HOME/.bashrc && \
    echo "export MARRTINOROBOT2_BASE=2wd" >> $HOME/.bashrc && \
    echo "export MARRTINOROBOT2_LASER_SENSOR=rplidar" >> $HOME/.bashrc && \
    echo "export MARRTINOROBOT2_DEPTH_SENSOR=oakdlite" >> $HOME/.bashrc

# Impostazione dell'entrypoint
CMD [ "/usr/bin/tmux" ]
