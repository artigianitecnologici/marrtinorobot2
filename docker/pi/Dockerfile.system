# RUN Container
# ------------------
# docker run -it --name system -v $(pwd):/home/ubuntu/marrtinorobot2_ws marrtinorobot2:system

# docker exec -it ros-container /bin/bash
# docker stop system
# docker rm nome-del-container

FROM ubuntu:jammy-20240808

ARG TARGETPLATFORM
LABEL maintainer="ferrarini09@gmail.com>"

SHELL ["/bin/bash", "-c"]
ENV ROS_DISTRO=humble
ENV INSTALL_PACKAGE=base

# Upgrade OS
RUN apt-get update -q && \
    DEBIAN_FRONTEND=noninteractive apt-get upgrade -y && \
    apt-get autoclean && \
    apt-get autoremove && \
    rm -rf /var/lib/apt/lists/*

# Install Ubuntu Mate desktop
RUN apt-get update -q && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y \
        ubuntu-mate-desktop && \
    apt-get autoclean && \
    apt-get autoremove && \
    rm -rf /var/lib/apt/lists/*

# Add Package
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y \
        supervisor wget gosu git sudo python3-pip tini \
        build-essential vim sudo locales tmux \
        bash-completion tzdata terminator \
        dos2unix && \
    apt-get autoclean && \
    apt-get autoremove && \
    rm -rf /var/lib/apt/lists/*

RUN apt-get update -q && \
    apt-get install -y curl gnupg2 lsb-release && \
    curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null 

RUN apt-get update -q && \
    apt-get install -y ros-${ROS_DISTRO}-ros-base \
    python3-argcomplete \
    python3-colcon-common-extensions \
    python3-rosdep python3-vcstool && \
    rosdep init && \
    rm -rf /var/lib/apt/lists/*

RUN rosdep update

RUN echo -e "\033[1;32m=== Create user ubuntu \033[0m"
RUN useradd -m -s /bin/bash ubuntu && \
    echo "ubuntu:ubuntu" | chpasswd && \
    usermod -aG sudo ubuntu && \
    echo "ubuntu ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

    RUN echo -e "\033[1;32mInstall Repository MARRtino Robot 2\033[0m"
    #
# USER root
RUN apt-get update && \
    apt-get install -y python3-vcstool build-essential
 

# Create workspace directory
RUN mkdir -p /home/ubuntu/marrtinorobot2_ws/src && \
    cd /home/ubuntu/marrtinorobot2_ws/src && \
    cd /home/ubuntu/marrtinorobot2_ws && \
    colcon build 



#COPY ./install_microros.sh /home/ubuntu/install_microros.sh
#RUN chmod +x /home/ubuntu/install_microros.sh 
# && /home/ubuntu/install_script.sh

##
# INSTALLAZIONE MICROROS
##
WORKDIR /home/ubuntu/marrtinorobot2_ws
RUN git clone -b $ROS_DISTRO https://github.com/micro-ROS/micro_ros_setup.git src/micro_ros_setup
RUN apt-get update \
        && rosdep update --rosdistro=${ROS_DISTRO} \
        && rosdep install --rosdistro=${ROS_DISTRO} --from-paths src -iry --os=ubuntu:$(lsb_release -sc) --skip-keys micro_ros_agent \
    && rm -rf /var/lib/apt/lists/*

RUN source /opt/ros/$ROS_DISTRO/setup.bash \
    && colcon build --packages-select micro_ros_setup

RUN source /opt/ros/$ROS_DISTRO/setup.bash  \
    && source /home/ubuntu/marrtinorobot2_ws/install/setup.bash \
    && ros2 run micro_ros_setup create_agent_ws.sh

RUN source /opt/ros/$ROS_DISTRO/setup.bash \
    && source /home/ubuntu/marrtinorobot2_ws/install/setup.bash \
    && ros2 run micro_ros_setup build_agent.sh

RUN source /opt/ros/$ROS_DISTRO/setup.bash \
    && colcon build
##
# EOF INSTALLAZIONE MICROROS
##
 

# Configure the environment for user 'ubuntu'
RUN echo "source /opt/ros/$ROS_DISTRO/setup.bash" >> /home/ubuntu/.bashrc

# Switch to user 'ubuntu'
USER ubuntu

# Set the default working directory for the container
WORKDIR /home/ubuntu

# Set the default command to start Bash
CMD ["/bin/bash"]
